/*
19.	Нарисовать сортировочную сеть для алгоритма Бетчера сортировки восьми чисел.
*/

#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

class BetcherNetwork {

	vector<vector<int>> all;		// Хранение массивов для вывода сортировочной сети
	static const int sizeArray = 8; // Размерность массива
	int array[sizeArray];			// Массив чисел

public:

	// Перегруженный конструктор класса
	BetcherNetwork() {
		// Заполняем массив случайными числами
		for (int i = 0; i < sizeArray; i++) {
			array[i] = rand() % 10;
		}
	}

	// Метод для получения размера массива
	int getSize() { return sizeArray; }

	// Метод для обмена элементов с учетом порядка возрастания или убывания
	void sortdir(int i, int j, int dir) {

		//cout << ". Сравниваем " << array[i] << " и " << array[j] << " \n";

		// Закидываем массивы в вектор
		vector<int> oneArray;
		for (int cnt = 0; cnt < sizeArray; cnt++) {
			oneArray.push_back(array[cnt]);
		}
		all.push_back(oneArray);

		// В зависимости от передаваего параметра изменяется порядок сортировки
		if (dir == (array[i] > array[j])) {

			//cout << "Меняем местами " << array[i] << " и " << array[j] << " \n";

			swap(array[i], array[j]);
		}
	}

	/* Pекурсивно сортирует последовательность в порядке возрастания (dir == 1), или убывания (dir == 0).
	   Сортируемая последовательность начинается с младшей позиции индекса,
	   параметр cnt - это количество элементов для сортировки. */
	void merge(int low, int cnt, int dir) {
		if (cnt > 1) {

			int k = cnt / 2;
			for (int i = low; i < low + k; i++) {
				sortdir(i, i + k, dir);
			}

			merge(low, k, dir);
			merge(low + k, k, dir);
		}
	}

	/* Создаём последовательность рекурсивно.
	   Сортируем две половинки, затем вызываем merge */
	void sort(int low, int cnt, int dir) {

		if (cnt > 1) {

			int k = cnt / 2;
			sort(low, k, 1);
			sort(low + k, k, 0);
			merge(low, cnt, dir);
		}
	}

	// Метод для вывода массива на экран
	void output() {

		for (int i = 0; i < sizeArray; i++) {
			cout << array[i] << " ";
		}
		cout << endl;
	}

	// Метод для вывода сортировочной сети на экран
	void outputNetwork() {

		cout << endl << endl;
		cout << "\t 0.   " << all[0][0] << " ---- " << all[2][0] << " ---" << "-" << "----- " << all[4][0] << " ---- " << all[12][0] << " ---" << "-" << "----" << "-" << "----" << "-" << "----- " << all[16][0] << " ---" << "-" << "----- " << all[18][0] << "\n";
		cout << "\t      " << "|" << " ---- " << "|" << " ---" << "-" << "----- " << "|" << " ---- " << "|" << " ---" << "-" << "----" << "-" << "----" << "-" << "----- " << "|" << " ---" << "-" << "----- " << "|" << "\n";
		cout << "\t 1.   " << all[0][1] << " ---- " << "|" << " -- " << all[3][1] << " ---- " << all[4][1] << " ---- " << "|" << " -- " << all[13][1] << " ---" << "-" << "----" << "-" << "----- " << "|" << " -- " << all[17][1] << " ---- " << all[18][1] << "\n";
		cout << "\t      " << "-" << "----- " << "|" << " -- " << "|" << " -----" << "-" << "----- " << "|" << " -- " << "|" << " ---" << "-" << "----" << "-" << "----- " << "|" << " -- " << "|" << " -----" << "-" << "\n";
		cout << "\t 2.   " << all[1][2] << " ---- " << all[2][2] << " -- " << "|" << " ---- " << all[5][2] << " ---- " << "|" << " -- " << "|" << " -- " << all[14][2] << " ---" << "-" << "----- " << all[16][2] << " -- " << "|" << " ---- " << all[19][2] << "\n";
		cout << "\t      " << "|" << " -----" << "-" << "--- " << "|" << " ---- " << "|" << " ---- " << "|" << " -- " << "|" << " -- " << "|" << " ---" << "-" << "------" << "-" << "--- " << "|" << " ---- " << "|" << "\n";
		cout << "\t 3.   " << all[1][3] << " -----" << "-" << "--- " << all[3][3] << " ---- " << all[5][3] << " ---- " << "|" << " -- " << "|" << " -- " << "|" << " -- " << all[15][3] << " -----" << "-" << "--- " << all[17][3] << " ---- " << all[19][3] << "\n";
		cout << "\t      " << "-" << "------" << "-" << "----" << "-" << "------" << "-" << "----- " << "|" << " -- " << "|" << " -- " << "|" << " -- " << "|" << " -----" << "-" << "----" << "-" << "------" << "-" << "\n";
		cout << "\t 4.   " << all[6][4] << " ---- " << all[8][4] << " ---" << "-" << "----- " << all[10][4] << " ---- " << all[12][4] << " -- " << "|" << " -- " << "|" << " -- " << "|" << " ---- " << all[20][4] << " ---" << "-" << "----- " << all[22][4] << "\n";
		cout << "\t      " << "|" << " ---- " << "|" << " ---" << "-" << "----- " << "|" << " -----" << "-" << "--- " << "|" << " -- " << "|" << " -- " << "|" << " ---- " << "|" << " ---" << "-" << "----- " << "|" << "\n";
		cout << "\t 5.   " << all[6][5] << " ---- " << "|" << " -- " << all[9][5] << " ---- " << all[10][5] << " -----" << "-" << "--- " << all[13][5] << " -- " << "|" << " -- " << "|" << " ---- " << "|" << " -- " << all[21][5] << " ---- " << all[22][5] << "\n";
		cout << "\t      " << "-" << "----- " << "|" << " -- " << "|" << " -----" << "-" << "------" << "-" << "----" << "-" << "--- " << "|" << " -- " << "|" << " ---- " << "|" << " -- " << "|" << " -----" << "-" << "\n";
		cout << "\t 6.   " << all[7][6] << " ---- " << all[8][6] << " -- " << "|" << " ---- " << all[11][6] << " -----" << "-" << "----" << "-" << "--- " << all[14][6] << " -- " << "|" << " ---- " << all[20][6] << " -- " << "|" << " ---- " << all[23][6] << "\n";
		cout << "\t      " << "|" << " -----" << "-" << "--- " << "|" << " ---- " << "|" << " -----" << "-" << "----" << "-" << "----" << "-" << "--- " << "|" << " -----" << "-" << "--- " << "|" << " ---- " << "|" << "\n";
		cout << "\t 7.   " << all[7][7] << " -----" << "-" << "--- " << all[9][7] << " ---- " << all[11][7] << " -----" << "-" << "----" << "-" << "----" << "-" << "--- " << all[15][7] << " -----" << "-" << "--- " << all[21][7] << " ---- " << all[23][7] << "\n";
	}

};

int main() {
	srand(time(0)); // генерация случайных чисел
	setlocale(LC_ALL, "Russian");

	BetcherNetwork sortingNetwork;

	cout << setw(25) << "Изначальный массив: ";
	sortingNetwork.output();

	const int firstPosition = 0;

	const int ascendingand = 1; // Сортировка по возрастанию
	const int descending = 0;   // Сортировка по убыванию

	// Отсортировать массив по возрастанию (последний параметр)
	sortingNetwork.sort(firstPosition, sortingNetwork.getSize(), ascendingand);

	cout << setw(25) << "Отсортированный массив: ";
	sortingNetwork.output();

	cout << endl;
	cout << "\t Сортировочная сеть:";
	sortingNetwork.outputNetwork();

	return 0;
}